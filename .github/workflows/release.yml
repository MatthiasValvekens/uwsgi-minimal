name: Publish release
on:
  push:
    tags: ["v*"]
    branches: [ master ]
  workflow_dispatch: {}
jobs:
  generate-metadata:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - id: docker-meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: |
            name=mfjval/uwsgi-minimal,enable=${{ startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/master' }}
            name=ghcr.io/matthiasvalvekens/uwsgi-minimal
          flavor: |
            latest=auto
            suffix=-py${{ matrix.python-version }},onlatest=${{ matrix.python-version != '3.11' }}
          tags: |
            type=ref,event=branch,enable=${{ !startsWith(github.ref, 'refs/tags/v') && github.ref != 'refs/heads/master' }}
            type=ref,event=pr
            type=ref,event=tag,enable=${{ !startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{version}},event=tag
            type=semver,pattern={{major}}.{{minor}},event=tag
            type=raw,value=unstable,enable=${{ github.ref == 'refs/heads/master' }},priority=400
      - name: Dump image matrix parameters
        # TODO get rid of this hack when https://github.com/actions/runner/pull/2477
        # is supported end-to-end
        run: |
          cat <<< "$DOCKER_METADATA_OUTPUT_TAGS" > tags.txt
          cat <<< "$DOCKER_METADATA_OUTPUT_LABELS" > labels.txt
      - name: Upload image matrix parameters
        uses: actions/upload-artifact@v3
        with:
          name: image-params-${{ matrix.python-version }}
          path: |
            tags.txt
            labels.txt
  publish-images:
    runs-on: ubuntu-latest
    environment: release
    needs: [generate-metadata]
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download parameters
        uses: actions/download-artifact@v3
        with:
          name: image-params-${{ matrix.python-version }}
          path: params/
      - name: Read parameters
        id: read-params
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "tags<<$EOF" >> "$GITHUB_OUTPUT"
          cat params/tags.txt >> "$GITHUB_OUTPUT"
          echo "$EOF" >> "$GITHUB_OUTPUT"
          echo "labels<<$EOF" >> "$GITHUB_OUTPUT"
          cat params/labels.txt >> "$GITHUB_OUTPUT"
          echo "$EOF" >> "$GITHUB_OUTPUT"
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.0.3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        if: ${{ startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/master' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        id: build-push
        uses: docker/build-push-action@v4
        with:
          context: src
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: true
          tags: ${{ steps.read-params.outputs.tags }}
          labels: ${{ steps.read-params.outputs.labels }}
          build-args: |
            TARGET_PYTHON_VERSION=${{ matrix.python-version }}
      - name: Generate cosign arguments
        id: cosign-args
        # TODO make this more DRY
        run: |
          echo -n "to-sign=" >> "$GITHUB_OUTPUT"
          echo -n "ghcr.io/matthiasvalvekens/uwsgi-minimal@$DIGEST" >> "$GITHUB_OUTPUT"
          if [[ $GITHUB_REF_TYPE == 'tag' || $GITHUB_REF == 'refs/heads/master' ]]; then
            echo -n " mfjval/uwsgi-minimal@$DIGEST" >> "$GITHUB_OUTPUT"
          fi
          echo "" >> "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"
        env:
          # this digest is for the manifest that combines all the platform images
          DIGEST: ${{ steps.build-push.outputs.digest }}
      - name: Sign images using GHA OIDC identity
        run: cosign sign --yes ${{ steps.cosign-args.outputs.to-sign }}
